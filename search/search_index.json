{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Method Security","text":"<p>Welcome to Method Security's open source projects. Here, you can find links to all of the cybersecurity tools that we are currently building and supporting.</p> <p>There are a number of different repositories within this Github organization, each one providing a scoped and granular set of capabilities focused on a particular problem area within the realm of cybersecurity. For a full listing of all currently available tools, please see our Tools page or visit the any individual repository's Github Pages documentation.</p> <p>If you're interested in contributing to any of our tools, or have ideas on a new tool, you're encouraged to first visit our organization's Discussion page.</p>"},{"location":"index.html#faqs","title":"FAQs","text":""},{"location":"index.html#why-build-more-cybersecurity-tools-doesnt-the-community-have-enough-tools-as-is","title":"Why build more cybersecurity tools? Doesn't the community have enough tools as is?","text":"<p>The community certainly has a large number of options available to it today, with a wide variety of truly amazing capabilities. However, we feel that the commonly felt tool fatigue has actually resulted in unnecessary bloat within a number of otherwise fantastic tools. This bloat can make tools hard to understand with their vast array of configuration flags.</p> <p>Our tools have been built around two guiding principles:</p> <ol> <li> <p>They are tightly scoped and easy to use.</p> </li> <li> <p>Each tool offers a tightly scoped set of capabilities, focusing the tool on a particular problem and minimizing the number of configuration values that it can accept.</p> </li> <li> <p>They are designed with data integration and automation in mind.</p> </li> <li> <p>Existing tools are often built with an operator first mentality, providing easy to read outputs for a human operating on the command line. We believe that for true cybesecurity automation, tools need to focus on machine readable outputs that make data integration and automation easy.</p> </li> </ol>"},{"location":"index.html#how-can-i-leverage-my-existing-toolsuite","title":"How can I leverage my existing toolsuite?","text":"<p>Existing tools have large followings for a reason, they solve a problem and they get the job done. We are not seeking to rebuild the wheel with our tools. Rather, we want to stand on the shoulders of giants and leverage best in class capabilities where they exist, wrapping them with our two guiding principles in mind.</p> <p>You can see examples of this in the codeanalyze tool, which wraps Semgrep's amazing static analysis capabilities and provides some opinionated configuration values, or in networkscan which leverages all the powers of naabu from the Project Discovery team.</p> <p>If you have an existing tool that is providing you with valuable data insights that you feel is a good candidate to become a Method tool, open a discussion to talk with us about it!</p>"},{"location":"index.html#how-do-i-automate-these-tools-and-chain-them-together","title":"How do I automate these tools and chain them together?","text":"<p>Since all the tools you'll find in this organization have been built with automation and ease of use in mind, you have a number of options available to you when designing your automation solution.</p> <p>However, if you're looking for something a bit more out of the box, the Method Platform from Method Security has been designed from the ground up with these tools in mind, providing deep automation and autonomy capabilities that allow security teams of all sizes and maturity levels to get up and running quickly.</p>"},{"location":"community/contribute/discussions.html","title":"Discussions","text":"<p>Method Security leverages Github's Discussion functionality for bug reports, feature requests, and questions. Please make sure you're creating the discussion in the appropriate repository.</p> <p>All Discussions handle at the Organization level, allowing the team to better track ideas, bugs, and questions across the assortment of tools that are hosted here.</p> <p>If the project's maintainers for a particular tool decide to accept a new feature or confirm that it is a bug, they will close the discussion and create a GitHub Issue associated with that discussion in the tool's repository.</p> <ul> <li>Feel free to open discussions for any reason. When you open a new discussion, you'll have to select a discussion category as described below.</li> <li>Please spend a small amount of time giving due diligence to the issue/discussion tracker. Your discussion might be a duplicate. If it is, please add your comment to the existing issue/discussion.</li> <li>Remember that users might search for your issue/discussion in the future, so please give it a meaningful title to help others.</li> <li>The issue should clearly explain the reason for opening, the proposal if you have any, and any relevant technical information.</li> </ul> <p>There are 3 categories of Discussions:</p> <ul> <li>\ud83d\udca1 Ideas<ul> <li>Share ideas for new features</li> </ul> </li> <li>\ud83d\udc1b Bugs<ul> <li>Report something that is not working as expected</li> </ul> </li> <li>\ud83d\ude4f Q&amp;A<ul> <li>Ask the community for help</li> </ul> </li> </ul>"},{"location":"community/contribute/issues.html","title":"Issues","text":"<p>Thanks for taking interest in methodaws!</p> <p>We leverage Github Discussions for all bug reports, feature requests, and questions, so please open a discussion rather than creating an Issue.</p> <p>While Discussions are Organization wide, each individual repository tracks its own Issues.</p> <p>!!! warning Issues created by non-maintainers will be immediately closed.</p>"},{"location":"community/contribute/pr.html","title":"Pull Requests","text":"<p>Thank you for taking interest in contributing to one of Method Security's open source cybersecurity tools!</p> <ol> <li>Every Pull Request should have an associated bug or feature issue unless you are fixing a trivial documentation issue.</li> <li>Please add the associated Issue link in the PR description.</li> <li>Your PR is more likely to be accepted if it focuses on just one change.</li> <li>There's no need to add or tag reviewers.</li> <li>If a reviewer commented on your code or asked for changes, please remember to respond with comment. Do not mark discussion as resolved. It's up to reviewer to mark it resolved (in case if suggested fix addresses problem properly). PRs with unresolved issues should not be merged (even if the comment is unclear or requires no action from your side).</li> <li>Please include a comment with the results before and after your change.</li> <li>Your PR is more likely to be accepted if it includes tests (We have not historically been very strict about tests, but we would like to improve this!).</li> <li>If your PR affects the user experience in some way, please update the README.md and the CLI help accordingly.</li> </ol>"},{"location":"docs/output.html","title":"Output Formats","text":"<p>All Method tools output data in a standardized schema that we call a <code>Signal</code>. You can see the Go struct here that defines the Signal but it consists of several properties:</p> <ul> <li><code>content</code></li> <li>This is the data that was generated by the specific tool and command that was called. The format of the content itself is unique to the command, and Method has no requirements as to the particular shape or values within the returned data.</li> <li><code>started_at</code></li> <li>The unix timestamp when the tool started to run.</li> <li><code>completed_at</code></li> <li>The unix timestamp when the tool completed it's run. This field is allowed to be empty, but tool author's should make every attempt to fill the value out, even on a failed run.</li> <li><code>status</code></li> <li>The unix status code for the run. Most commonly the value of this field will be either <code>1</code> or <code>0</code>, but tool author's can leverage additional values if they would like to communicate more granular failure codes.</li> <li><code>error_message</code></li> <li>An optional error message to be returned to the caller. This can be useful when integrating tool outputs into automated workflows where a propagated error message could provide valuable context.</li> </ul> <p>Method tools provide three different output formats to convey this information.</p>"},{"location":"docs/output.html#signal","title":"Signal","text":"<p>A JSON representation of the Signal schema where the value of the <code>content</code> key is a Base64 encoded string of the tool output. This allows tools that do not output JSON to be incorporated into automation workflows.</p>"},{"location":"docs/output.html#json","title":"JSON","text":"<p>A JSON representation of the Signal schema, where the JSON formatted output of the tool command is included as the value of the <code>content</code> key.</p>"},{"location":"docs/output.html#yaml","title":"YAML","text":"<p>A YAML representation of the Signal schema, where the YAML formatted output of the tool command is included as the value of the <code>content</code> key.</p>"},{"location":"docs/tools.html","title":"Tools","text":"<p>We are constantly adding additional tools and capabilities. For the most up to date list, we recommend checking out the list of repositories within the Method Security Github organization, each of which has its own Github Pages documentation with more in-depth information about that specific tool.</p> Tool Repository Documentation Description methodaws https://github.com/Method-Security/methodaws https://method-security.github.io/methodaws Tools for auditing AWS environments methodazure https://github.com/Method-Security/methodazure https://method-security.github.io/methodazure Tools for assessing Azure environments networkscan https://github.com/Method-Security/networkscan https://method-security.github.io/networkscan Scan network services in the cloud or on-premises osintscan https://github.com/Method-Security/osintscan https://method-security.github.io/osintscan Leverage open source data to gauge your exposure webscan https://github.com/Method-Security/webscan https://method-security.github.io/webscan Discover and scan web applications gitlabctl https://github.com/Method-Security/gitlabctl https://method-security.github.io/gitlabctl codeanalyze https://github.com/Method-Security/codeanalyze https://method-security.github.io/codeanalyze Static analysis for code repositories codeanalyzevcs https://github.com/Method-Security/codeanalyzevcs https://method-security.github.io/codeanalyzevcs Orchestrate CI jobs using codeanalyze"}]}